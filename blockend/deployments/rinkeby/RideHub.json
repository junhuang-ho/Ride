{
  "address": "0xA2EB40b9d1Ed30CFeE0C5C529cC7c0FFb7D83DcF",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "AcceptedTicket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "applicant",
          "type": "address"
        }
      ],
      "name": "ApplicantApproved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "DestinationNotReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "DestinationReached",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "DriverCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "DriverRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForceEndDriver",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ForceEndPassenger",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "deployer",
          "type": "address"
        }
      ],
      "name": "InitializedRideBase",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RequestCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RequestTicket",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        }
      ],
      "name": "TicketCleared",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensDeposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "TokensRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "decrease",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "increase",
          "type": "address"
        }
      ],
      "name": "TokensTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "TripEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "tixId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "passenger",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "driver",
          "type": "address"
        }
      ],
      "name": "TripStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "banned",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "until",
          "type": "uint256"
        }
      ],
      "name": "UserBanned",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToActive",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToBanEndTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "addressToDriverReputation",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "uri",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxMetresPerTrip",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "metresTravelled",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "countStart",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "countEnd",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalRating",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "countRating",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "badgeToBadgeMaxScore",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "badgeToCostPerMetre",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "banDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "baseFare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        }
      ],
      "name": "cancelPickUp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        }
      ],
      "name": "cancelRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "costPerMinute",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        }
      ],
      "name": "destinationNotReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        }
      ],
      "name": "destinationReached",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        },
        {
          "internalType": "bool",
          "name": "_confirmation",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_rating",
          "type": "uint256"
        }
      ],
      "name": "endTrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        }
      ],
      "name": "forceEndDriver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        }
      ],
      "name": "forceEndPassenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_useBadge",
          "type": "uint256"
        }
      ],
      "name": "getTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "_badgesMaxScores",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_requestFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_baseFare",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "_costPerMetre",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256",
          "name": "_costPerMinute",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_banDuration",
          "type": "uint256"
        }
      ],
      "name": "initializeRideBase",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_driver",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "passBackgroundCheck",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "placeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMetresPerTrip",
          "type": "uint256"
        }
      ],
      "name": "registerDriver",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "removeDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "requestFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_badge",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_strict",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_metres",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minutes",
          "type": "uint256"
        }
      ],
      "name": "requestTicket",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_badgesMaxScores",
          "type": "uint256[]"
        }
      ],
      "name": "setBadgesMaxScores",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_banDuration",
          "type": "uint256"
        }
      ],
      "name": "setBanDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_baseFare",
          "type": "uint256"
        }
      ],
      "name": "setBaseFare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "_costPerMetre",
          "type": "uint256[]"
        }
      ],
      "name": "setCostPerMetre",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_costPerMinute",
          "type": "uint256"
        }
      ],
      "name": "setCostPerMinute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_requestFee",
          "type": "uint256"
        }
      ],
      "name": "setRequestFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_tixId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "_driver",
          "type": "address"
        }
      ],
      "name": "startTrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxMetresPerTrip",
          "type": "uint256"
        }
      ],
      "name": "updateMaxMetresPerTrip",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x704f106820f1a587b9aaaa56c99065cd5a0f89f6f8e65290a4c9d54f753f4232",
  "receipt": {
    "to": null,
    "from": "0x614539062F7205049917e03ec4C86FF808F083cb",
    "contractAddress": "0xA2EB40b9d1Ed30CFeE0C5C529cC7c0FFb7D83DcF",
    "transactionIndex": 4,
    "gasUsed": "5392952",
    "logsBloom": "0x
    "blockHash": "0xde66d8435c40c1328c8cc0ae2c0676e3b94faef7b28f417d4597d82597bfdb5c",
    "transactionHash": "0x704f106820f1a587b9aaaa56c99065cd5a0f89f6f8e65290a4c9d54f753f4232",
    "logs": [
      {
        "transactionIndex": 4,
        "blockNumber": 9862290,
        "transactionHash": "0x704f106820f1a587b9aaaa56c99065cd5a0f89f6f8e65290a4c9d54f753f4232",
        "address": "0xA2EB40b9d1Ed30CFeE0C5C529cC7c0FFb7D83DcF",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000614539062f7205049917e03ec4c86ff808f083cb"
        ],
        "data": "0x",
        "logIndex": 2,
        "blockHash": "0xde66d8435c40c1328c8cc0ae2c0676e3b94faef7b28f417d4597d82597bfdb5c"
      }
    ],
    "blockNumber": 9862290,
    "cumulativeGasUsed": "5643728",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "d8af103f18489e91b6de513d74c2c0cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.2+commit.661d1103\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AcceptedTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"applicant\",\"type\":\"address\"}],\"name\":\"ApplicantApproved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DestinationNotReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DestinationReached\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DriverCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"DriverRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForceEndDriver\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ForceEndPassenger\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"deployer\",\"type\":\"address\"}],\"name\":\"InitializedRideBase\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RequestCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RequestTicket\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"}],\"name\":\"TicketCleared\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensDeposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"TokensRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"decrease\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"increase\",\"type\":\"address\"}],\"name\":\"TokensTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TripEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"tixId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"passenger\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"driver\",\"type\":\"address\"}],\"name\":\"TripStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"banned\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"until\",\"type\":\"uint256\"}],\"name\":\"UserBanned\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToActive\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToBanEndTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"addressToDriverReputation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxMetresPerTrip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"metresTravelled\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countEnd\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRating\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"countRating\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"badgeToBadgeMaxScore\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"badgeToCostPerMetre\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"banDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"baseFare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"}],\"name\":\"cancelPickUp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"}],\"name\":\"cancelRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"costPerMinute\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"}],\"name\":\"destinationNotReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"}],\"name\":\"destinationReached\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"_confirmation\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_rating\",\"type\":\"uint256\"}],\"name\":\"endTrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"}],\"name\":\"forceEndDriver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"}],\"name\":\"forceEndPassenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_useBadge\",\"type\":\"uint256\"}],\"name\":\"getTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"_badgesMaxScores\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_requestFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_baseFare\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"_costPerMetre\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"_costPerMinute\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_banDuration\",\"type\":\"uint256\"}],\"name\":\"initializeRideBase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_driver\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"passBackgroundCheck\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"placeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMetresPerTrip\",\"type\":\"uint256\"}],\"name\":\"registerDriver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"removeDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"requestFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_badge\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_strict\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_metres\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minutes\",\"type\":\"uint256\"}],\"name\":\"requestTicket\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_badgesMaxScores\",\"type\":\"uint256[]\"}],\"name\":\"setBadgesMaxScores\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_banDuration\",\"type\":\"uint256\"}],\"name\":\"setBanDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_baseFare\",\"type\":\"uint256\"}],\"name\":\"setBaseFare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"_costPerMetre\",\"type\":\"uint256[]\"}],\"name\":\"setCostPerMetre\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_costPerMinute\",\"type\":\"uint256\"}],\"name\":\"setCostPerMinute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_requestFee\",\"type\":\"uint256\"}],\"name\":\"setRequestFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_tixId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"_driver\",\"type\":\"address\"}],\"name\":\"startTrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxMetresPerTrip\",\"type\":\"uint256\"}],\"name\":\"updateMaxMetresPerTrip\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"cancelPickUp(bytes32)\":{\"custom:event\":\"DriverCancelled\",\"params\":{\"_tixId\":\"Ticket ID\"}},\"cancelRequest(bytes32)\":{\"custom:event\":\"RequestCancelled\",\"params\":{\"_tixId\":\"Ticket ID\"}},\"destinationNotReached(bytes32)\":{\"custom:event\":\"DestinationNotReached\",\"params\":{\"_tixId\":\"Ticket ID\"}},\"destinationReached(bytes32)\":{\"custom:event\":\"DestinationReached\",\"params\":{\"_tixId\":\"Ticket ID\"}},\"endTrip(bytes32,bool,uint256)\":{\"custom:event\":\"TripEnded driver would select destination reached or not, and event will emit to passenger's UI then passenger would confirm if this is true or false (via frontend UI), followed by a rating\",\"params\":{\"_confirmation\":\"confirmation from passenger that either destination has been reached or not\",\"_rating\":\"refer _giveRating\",\"_tixId\":\"Ticket ID\"}},\"forceEndDriver(bytes32)\":{\"custom:event\":\"ForceEndDriver no fare is paid, but passenger is temporarily banned for banDuration\",\"params\":{\"_tixId\":\"Ticket ID\"}},\"forceEndPassenger(bytes32)\":{\"custom:event\":\"ForceEndPassenger no fare is paid, but driver is temporarily banned for banDuration\",\"params\":{\"_tixId\":\"Ticket ID\"}},\"getTicket(bytes32,uint256)\":{\"custom:event\":\"AcceptedTicket higher badge can charge higher price, but what if passenger always choose lower price? (badgeToCostPerMetre[_badge], at RidePassenger.sol) then higher badge driver wont get chosen at all solution: _useBadge that allows driver to choose which badge rank they want to use up to achieved badge rank at frontend, default _useBadge to driver's current badge rank\",\"params\":{\"_tixId\":\"Ticket ID\",\"_useBadge\":\"allows driver to use any badge rank equal to or lower than current rank  (this is to give driver the option of lower cosr per metre rates)\"}},\"initializeRideBase(address,uint256[],uint256,uint256,uint256[],uint256,uint256)\":{\"custom:event\":\"InitializedRideBase\",\"details\":\"to be run instantly after deployment\",\"params\":{\"_badgesMaxScores\":\"| Refer RideBadge.sol\",\"_banDuration\":\"| Refer RideCost.sol\",\"_baseFare\":\"| Refer RideCost.sol\",\"_costPerMetre\":\"| Refer RideCost.sol\",\"_costPerMinute\":\"| Refer RideCost.sol\",\"_requestFee\":\"| Refer RideCost.sol\",\"_tokenAddress\":\"| Ride token address\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"passBackgroundCheck(address,string)\":{\"custom:event\":\"ApplicantApproved\",\"params\":{\"_driver\":\"applicant\",\"_uri\":\"information of applicant\"}},\"placeDeposit(uint256)\":{\"custom:event\":\"TokensDeposited\",\"details\":\"call token contract's \\\"approve\\\" first\",\"params\":{\"_amount\":\"| unit in token\"}},\"registerDriver(uint256)\":{\"custom:event\":\"DriverRegistered\",\"params\":{\"_maxMetresPerTrip\":\"| unit in metre\"}},\"removeDeposit()\":{\"custom:event\":\"TokensRemoved\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"requestTicket(uint256,bool,uint256,uint256)\":{\"custom:event\":\"RequestTicket\",\"params\":{\"_badge\":\"badge rank requested\",\"_metres\":\"estimated distance from origin to destination as determined by Maps API\",\"_minutes\":\"estimated time taken from origin to destination as determined by Maps API\",\"_strict\":\"whether driver must meet requested badge rank exactly (true) or default - any badge rank equal or greater than (false)\"}},\"setBadgesMaxScores(uint256[])\":{\"params\":{\"_badgesMaxScores\":\"Score that defines a specific badge rank\"}},\"setBanDuration(uint256)\":{\"params\":{\"_banDuration\":\"| unit in unix timestamp | https://docs.soliditylang.org/en/v0.8.10/units-and-global-variables.html#time-units\"}},\"setBaseFare(uint256)\":{\"params\":{\"_baseFare\":\"| unit in token\"}},\"setCostPerMetre(uint256[])\":{\"params\":{\"_costPerMetre\":\"| unit in token\"}},\"setCostPerMinute(uint256)\":{\"params\":{\"_costPerMinute\":\"| unit in token\"}},\"setRequestFee(uint256)\":{\"params\":{\"_requestFee\":\"| unit in token\"}},\"startTrip(bytes32,address)\":{\"custom:event\":\"TripStarted\",\"params\":{\"_driver\":\"driver's address - get via QR scan?\",\"_tixId\":\"Ticket ID\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateMaxMetresPerTrip(uint256)\":{\"params\":{\"_maxMetresPerTrip\":\"| unit in metre\"}}},\"title\":\"Main contract for driver and passenger interaction\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cancelPickUp(bytes32)\":{\"notice\":\"cancelPickUp cancels pick up, can only be called before startTrip\"},\"cancelRequest(bytes32)\":{\"notice\":\"cancelRequest cancels ticket, can only be called before startTrip\"},\"destinationNotReached(bytes32)\":{\"notice\":\"destinationNotReached allows driver to indicate to passenger to end trip and destination not reached\"},\"destinationReached(bytes32)\":{\"notice\":\"destinationReached allows driver to indicate to passenger to end trip and destination reached\"},\"endTrip(bytes32,bool,uint256)\":{\"notice\":\"endTrip ends the trip, can only be called once driver has called either destinationReached or destinationNotReached\"},\"forceEndDriver(bytes32)\":{\"notice\":\"forceEndDriver can be called after tixIdToTicket[_tixId].forceEndTimestamp duration and if passenger has not called endTrip\"},\"forceEndPassenger(bytes32)\":{\"notice\":\"forceEndPassenger can be called after tixIdToTicket[_tixId].forceEndTimestamp duration and if driver has not called destinationReached or destinationNotReached\"},\"getTicket(bytes32,uint256)\":{\"notice\":\"getTicket allows driver to accept passenger's ticket request\"},\"initializeRideBase(address,uint256[],uint256,uint256,uint256[],uint256,uint256)\":{\"notice\":\"initializeRideBase initializes parameters of RideHub\"},\"passBackgroundCheck(address,string)\":{\"notice\":\"passBackgroundCheck of driver applicants\"},\"placeDeposit(uint256)\":{\"notice\":\"placeDeposit allows users to deposit token into RideHub contract\"},\"registerDriver(uint256)\":{\"notice\":\"registerDriver registers approved applicants (has passed background check)\"},\"removeDeposit()\":{\"notice\":\"removeDeposit allows users to remove token from RideHub contract\"},\"requestTicket(uint256,bool,uint256,uint256)\":{\"notice\":\"requestTicket allows passenger to request for ride\"},\"setBadgesMaxScores(uint256[])\":{\"notice\":\"setBadgesMaxScores maps score to badge\"},\"setBanDuration(uint256)\":{\"notice\":\"setBanDuration sets user ban duration\"},\"setBaseFare(uint256)\":{\"notice\":\"setBaseFare sets base fare\"},\"setCostPerMetre(uint256[])\":{\"notice\":\"setCostPerMetre sets cost per metre\"},\"setCostPerMinute(uint256)\":{\"notice\":\"setCostPerMinute sets cost per minute\"},\"setRequestFee(uint256)\":{\"notice\":\"setRequestFee sets request fee\"},\"startTrip(bytes32,address)\":{\"notice\":\"startTrip starts the trip, can only be called once driver reached passenger\"},\"updateMaxMetresPerTrip(uint256)\":{\"notice\":\"updateMaxMetresPerTrip updates maximum metre per trip of driver\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ride/RideHub.sol\":\"RideHub\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"contracts/ride/RideBadge.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RideControl.sol\\\";\\n\\n/// @title Badge rank for drivers\\ncontract RideBadge is RideControl {\\n    enum Badges {\\n        Newbie,\\n        Bronze,\\n        Silver,\\n        Gold,\\n        Platinum,\\n        Veteran\\n    }\\n    uint256 internal constant badgesCount = 6;\\n\\n    mapping(uint256 => uint256) public badgeToBadgeMaxScore;\\n\\n    /**\\n     * setBadgesMaxScores maps score to badge\\n     *\\n     * @param _badgesMaxScores Score that defines a specific badge rank\\n     */\\n    function setBadgesMaxScores(uint256[] memory _badgesMaxScores)\\n        public\\n        onlyOwner\\n    {\\n        require(\\n            _badgesMaxScores.length == badgesCount - 1,\\n            \\\"_badgesMaxScores.length must be 1 less than Badges\\\"\\n        );\\n        for (uint256 i = 0; i < _badgesMaxScores.length; i++) {\\n            badgeToBadgeMaxScore[i] = _badgesMaxScores[i];\\n        }\\n    }\\n\\n    /**\\n     * _getBadge returns the badge rank for given score\\n     *\\n     * @param _score | unitless integer\\n     *\\n     * @return badge rank\\n     */\\n    function _getBadge(uint256 _score) internal view returns (uint256) {\\n        if (_score <= badgeToBadgeMaxScore[0]) {\\n            return uint256(Badges.Newbie);\\n        } else if (\\n            _score > badgeToBadgeMaxScore[0] &&\\n            _score <= badgeToBadgeMaxScore[1]\\n        ) {\\n            return uint256(Badges.Bronze);\\n        } else if (\\n            _score > badgeToBadgeMaxScore[1] &&\\n            _score <= badgeToBadgeMaxScore[2]\\n        ) {\\n            return uint256(Badges.Silver);\\n        } else if (\\n            _score > badgeToBadgeMaxScore[2] &&\\n            _score <= badgeToBadgeMaxScore[3]\\n        ) {\\n            return uint256(Badges.Gold);\\n        } else if (\\n            _score > badgeToBadgeMaxScore[3] &&\\n            _score <= badgeToBadgeMaxScore[4]\\n        ) {\\n            return uint256(Badges.Platinum);\\n        } else {\\n            return uint256(Badges.Veteran);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbf021e0194d32a2a1b9add77f6f05cbc54e35c5207c7afb401661088a0cb4f91\",\"license\":\"BUSL-1.1\"},\"contracts/ride/RideBase.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport \\\"./RideCost.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title Base contract for Passenger and Driver of RideHub\\ncontract RideBase is RideCost, ReentrancyGuard, Initializable {\\n    ERC20 public token;\\n\\n    uint256 internal constant RATING_MIN = 1;\\n    uint256 internal constant RATING_MAX = 5;\\n    bool public initialized;\\n\\n    mapping(address => uint256) public addressToDeposit;\\n    mapping(address => bool) public addressToActive;\\n    mapping(address => uint256) public addressToBanEndTimestamp;\\n\\n    /**\\n     * lifetime cumulative values of drivers\\n     */\\n    struct DriverReputation {\\n        uint256 id;\\n        string uri;\\n        uint256 maxMetresPerTrip;\\n        uint256 metresTravelled;\\n        uint256 countStart;\\n        uint256 countEnd;\\n        uint256 totalRating;\\n        uint256 countRating;\\n    }\\n    mapping(address => DriverReputation) public addressToDriverReputation;\\n\\n    /**\\n     * @dev if a ticket exists (details not 0) in tixIdToTicket, then it is considered active\\n     *\\n     * @custom:TODO: Make it loopable so that can list to drivers?\\n     */\\n    struct Ticket {\\n        address passenger;\\n        address driver;\\n        uint256 badge;\\n        bool strict;\\n        uint256 metres;\\n        uint256 fare;\\n        bool tripStart;\\n        uint256 forceEndTimestamp;\\n    }\\n    mapping(bytes32 => Ticket) internal tixIdToTicket;\\n\\n    struct EndDetails {\\n        address driver;\\n        bool reached;\\n    }\\n    mapping(bytes32 => EndDetails) internal tixToEndDetails;\\n\\n    event InitializedRideBase(address token, address deployer);\\n    event TokensDeposited(address sender, uint256 amount);\\n    event TokensRemoved(address sender, uint256 amount);\\n    event TokensTransferred(\\n        bytes32 indexed tixId,\\n        uint256 amount,\\n        address decrease,\\n        address increase\\n    );\\n    event TicketCleared(bytes32 indexed tixId);\\n    event UserBanned(address banned, uint256 until);\\n    event ApplicantApproved(address applicant);\\n\\n    /**\\n     * @dev order of execution of modifiers when used in functions is left to right\\n     */\\n\\n    modifier notDriver() {\\n        require(\\n            addressToDriverReputation[msg.sender].id == 0,\\n            \\\"caller is driver\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notActive() {\\n        require(!addressToActive[msg.sender], \\\"caller is active\\\");\\n        _;\\n    }\\n\\n    modifier driverMatchTixDriver(bytes32 _tixId, address _driver) {\\n        require(\\n            _driver == tixIdToTicket[_tixId].driver,\\n            \\\"driver not match tix driver\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier tripNotStart(bytes32 _tixId) {\\n        require(!tixIdToTicket[_tixId].tripStart, \\\"trip already started\\\");\\n        _;\\n    }\\n\\n    modifier tripInProgress(bytes32 _tixId) {\\n        require(tixIdToTicket[_tixId].tripStart, \\\"trip not started\\\");\\n        _;\\n    }\\n\\n    modifier forceEndAllowed(bytes32 _tixId) {\\n        require(\\n            block.timestamp > tixIdToTicket[_tixId].forceEndTimestamp,\\n            \\\"too early\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier notBan() {\\n        require(\\n            block.timestamp >= addressToBanEndTimestamp[msg.sender],\\n            \\\"still banned\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier initializedRideBase() {\\n        require(initialized, \\\"not init RideBase\\\");\\n        _;\\n    }\\n\\n    /**\\n     * initializeRideBase initializes parameters of RideHub\\n     *\\n     * @dev to be run instantly after deployment\\n     *\\n     * @param _tokenAddress     | Ride token address\\n     * @param _badgesMaxScores  | Refer RideBadge.sol\\n     * @param _requestFee       | Refer RideCost.sol\\n     * @param _baseFare         | Refer RideCost.sol\\n     * @param _costPerMetre     | Refer RideCost.sol\\n     * @param _costPerMinute    | Refer RideCost.sol\\n     * @param _banDuration      | Refer RideCost.sol\\n     *\\n     * @custom:event InitializedRideBase\\n     */\\n    function initializeRideBase(\\n        address _tokenAddress,\\n        uint256[] memory _badgesMaxScores,\\n        uint256 _requestFee,\\n        uint256 _baseFare,\\n        uint256[] memory _costPerMetre,\\n        uint256 _costPerMinute,\\n        uint256 _banDuration\\n    ) external onlyOwner initializer {\\n        token = ERC20(_tokenAddress);\\n        setBadgesMaxScores(_badgesMaxScores);\\n        setRequestFee(_requestFee);\\n        setBaseFare(_baseFare);\\n        setCostPerMetre(_costPerMetre);\\n        setCostPerMinute(_costPerMinute);\\n        setBanDuration(_banDuration);\\n\\n        initialized = true;\\n\\n        emit InitializedRideBase(_tokenAddress, msg.sender);\\n    }\\n\\n    /**\\n     * placeDeposit allows users to deposit token into RideHub contract\\n     *\\n     * @dev call token contract's \\\"approve\\\" first\\n     *\\n     * @param _amount | unit in token\\n     *\\n     * @custom:event TokensDeposited\\n     */\\n    function placeDeposit(uint256 _amount) external initializedRideBase {\\n        require(_amount > 0, \\\"0 amount\\\");\\n        require(\\n            token.allowance(msg.sender, address(this)) >= _amount,\\n            \\\"check token allowance\\\"\\n        );\\n        bool sent = token.transferFrom(msg.sender, address(this), _amount);\\n        require(sent, \\\"tx failed\\\");\\n\\n        addressToDeposit[msg.sender] += _amount;\\n\\n        emit TokensDeposited(msg.sender, _amount);\\n    }\\n\\n    /**\\n     * removeDeposit allows users to remove token from RideHub contract\\n     *\\n     * @custom:event TokensRemoved\\n     */\\n    function removeDeposit() external notActive nonReentrant {\\n        uint256 amount = addressToDeposit[msg.sender];\\n        require(amount > 0, \\\"deposit empty\\\");\\n        require(\\n            token.balanceOf(address(this)) >= amount,\\n            \\\"contract insufficient funds\\\"\\n        );\\n        addressToDeposit[msg.sender] = 0;\\n        bool sent = token.transfer(msg.sender, amount);\\n        // bool sent = token.transferFrom(address(this), msg.sender, amount);\\n        require(sent, \\\"tx failed\\\");\\n\\n        emit TokensRemoved(msg.sender, amount);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    ///// ---------------------------------------------------------------------- /////\\n    ///// ------------------------- internal functions ------------------------- /////\\n    ///// ---------------------------------------------------------------------- /////\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * _transfer rebalances _amount tokens from one address to another\\n     *\\n     * @param _tixId Ticket ID\\n     * @param _amount | unit in token\\n     * @param _decrease address to decrease tokens by\\n     * @param _increase address to increase tokens by\\n     *\\n     * @custom:event TokensTransferred\\n     */\\n    function _transfer(\\n        bytes32 _tixId,\\n        uint256 _amount,\\n        address _decrease,\\n        address _increase\\n    ) internal {\\n        addressToDeposit[_decrease] -= _amount;\\n        addressToDeposit[_increase] += _amount;\\n\\n        emit TokensTransferred(_tixId, _amount, _decrease, _increase);\\n    }\\n\\n    /**\\n     * _cleanUp clears ticket information and set active status of users to false\\n     *\\n     * @param _tixId Ticket ID\\n     * @param _passenger passenger's address\\n     * @param _driver driver's address\\n     *\\n     * @custom:event TicketCleared\\n     */\\n    function _cleanUp(\\n        bytes32 _tixId,\\n        address _passenger,\\n        address _driver\\n    ) internal {\\n        delete tixIdToTicket[_tixId];\\n        delete tixToEndDetails[_tixId];\\n        addressToActive[_passenger] = false;\\n        addressToActive[_driver] = false;\\n\\n        emit TicketCleared(_tixId);\\n    }\\n\\n    /**\\n     * _temporaryBan user\\n     *\\n     * @param _address address to be banned\\n     *\\n     * @custom:event UserBanned\\n     */\\n    function _temporaryBan(address _address) internal {\\n        uint256 banUntil = block.timestamp + banDuration;\\n        addressToBanEndTimestamp[_address] = banUntil;\\n\\n        emit UserBanned(_address, banUntil);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    ///// ---------------------------------------------------------------------- /////\\n    ///// --------------------------- admin functions -------------------------- /////\\n    ///// ---------------------------------------------------------------------- /////\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /// @custom:TODO: backup fn if pax or driver didn't force end\\n\\n    /**\\n     * passBackgroundCheck of driver applicants\\n     *\\n     * @param _driver applicant\\n     * @param _uri information of applicant\\n     *\\n     * @custom:event ApplicantApproved\\n     */\\n    function passBackgroundCheck(address _driver, string memory _uri)\\n        external\\n        onlyOwner\\n        initializedRideBase\\n    {\\n        require(\\n            bytes(addressToDriverReputation[_driver].uri).length == 0,\\n            \\\"uri already set\\\"\\n        );\\n        addressToDriverReputation[_driver].uri = _uri;\\n\\n        emit ApplicantApproved(_driver);\\n    }\\n}\\n\",\"keccak256\":\"0xf8f2c6f78dec1dc2a1bfa6e044274aa9cf40d3f585dd440d40d638e7b4da279e\",\"license\":\"BUSL-1.1\"},\"contracts/ride/RideControl.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/// @custom:TODO implement contract details\\n\\n// import \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\n\\n/// @title Access & Governance settings\\ncontract RideControl is Ownable {\\n    // bytes32 public constant ROLE_GOVERNANCE = keccak256(\\\"ROLE_GOVERNANCE\\\");\\n    // bytes32 public constant ROLE_MULTISIG = keccak256(\\\"ROLE_MULTISIG\\\"); // for quicker execution | background checks ?\\n    // bytes32 public constant ROLE_ADMIN = keccak256(\\\"ROLE_ADMIN\\\"); // for tasks like background checks\\n}\\n\",\"keccak256\":\"0x85de5f6e5cc1cf47765746cebf8f4929dafbc85de12f5ee6a484f8e9dc59a7f9\",\"license\":\"BUSL-1.1\"},\"contracts/ride/RideCost.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RideBadge.sol\\\";\\n\\n/// @title Sets RideHub's costs\\ncontract RideCost is RideBadge {\\n    uint256 public requestFee;\\n    uint256 public baseFare;\\n    uint256 public costPerMinute;\\n    uint256 public banDuration;\\n    mapping(uint256 => uint256) public badgeToCostPerMetre;\\n\\n    /**\\n     * setRequestFee sets request fee\\n     *\\n     * @param _requestFee | unit in token\\n     */\\n    function setRequestFee(uint256 _requestFee) public onlyOwner {\\n        requestFee = _requestFee; // input format: token in Wei\\n    }\\n\\n    /**\\n     * setBaseFare sets base fare\\n     *\\n     * @param _baseFare | unit in token\\n     */\\n    function setBaseFare(uint256 _baseFare) public onlyOwner {\\n        baseFare = _baseFare; // input format: token in Wei\\n    }\\n\\n    /**\\n     * setCostPerMinute sets cost per minute\\n     *\\n     * @param _costPerMinute | unit in token\\n     */\\n    function setCostPerMinute(uint256 _costPerMinute) public onlyOwner {\\n        costPerMinute = _costPerMinute; // input format: token in Wei\\n    }\\n\\n    /**\\n     * setBanDuration sets user ban duration\\n     *\\n     * @param _banDuration | unit in unix timestamp | https://docs.soliditylang.org/en/v0.8.10/units-and-global-variables.html#time-units\\n     */\\n    function setBanDuration(uint256 _banDuration) public onlyOwner {\\n        banDuration = _banDuration;\\n    }\\n\\n    /**\\n     * setCostPerMetre sets cost per metre\\n     *\\n     * @param _costPerMetre | unit in token\\n     */\\n    function setCostPerMetre(uint256[] memory _costPerMetre) public onlyOwner {\\n        require(\\n            _costPerMetre.length == badgesCount,\\n            \\\"_costPerMetre.length must be equal Badges\\\"\\n        );\\n        for (uint256 i = 0; i < _costPerMetre.length; i++) {\\n            badgeToCostPerMetre[i] = _costPerMetre[i]; // input format: token in Wei // rounded down\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x86ee45c1b3391d973a1c970beab3d7ad9b9405a39b3789a94bb59a90edf984b1\",\"license\":\"BUSL-1.1\"},\"contracts/ride/RideDriver.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\n\\nimport \\\"./RideBase.sol\\\";\\nimport \\\"./RideUtils.sol\\\";\\n\\n/// @title Driver component of RideHub\\ncontract RideDriver is RideBase {\\n    using Counters for Counters.Counter;\\n    Counters.Counter private _driverIdCounter;\\n\\n    event DriverRegistered(address sender);\\n    event AcceptedTicket(bytes32 indexed tixId, address sender);\\n    event DriverCancelled(bytes32 indexed tixId, address sender);\\n    event DestinationReached(bytes32 indexed tixId, address sender);\\n    event DestinationNotReached(bytes32 indexed tixId, address sender);\\n    event ForceEndDriver(bytes32 indexed tixId, address sender);\\n\\n    modifier isDriver() {\\n        require(\\n            addressToDriverReputation[msg.sender].id != 0,\\n            \\\"caller not driver\\\"\\n        );\\n        _;\\n    }\\n\\n    constructor() {\\n        _burnFirstDriverId();\\n    }\\n\\n    /**\\n     * registerDriver registers approved applicants (has passed background check)\\n     *\\n     * @param _maxMetresPerTrip | unit in metre\\n     *\\n     * @custom:event DriverRegistered\\n     */\\n    function registerDriver(uint256 _maxMetresPerTrip)\\n        external\\n        initializedRideBase\\n        notDriver\\n        notActive\\n    {\\n        require(\\n            bytes(addressToDriverReputation[msg.sender].uri).length != 0,\\n            \\\"uri not set in bg check\\\"\\n        );\\n        require(msg.sender != address(0), \\\"0 address\\\");\\n\\n        addressToDriverReputation[msg.sender].id = _mint();\\n        addressToDriverReputation[msg.sender]\\n            .maxMetresPerTrip = _maxMetresPerTrip;\\n        addressToDriverReputation[msg.sender].metresTravelled = 0;\\n        addressToDriverReputation[msg.sender].countStart = 0;\\n        addressToDriverReputation[msg.sender].countEnd = 0;\\n        addressToDriverReputation[msg.sender].totalRating = 0;\\n        addressToDriverReputation[msg.sender].countRating = 0;\\n\\n        emit DriverRegistered(msg.sender);\\n    }\\n\\n    /**\\n     * updateMaxMetresPerTrip updates maximum metre per trip of driver\\n     *\\n     * @param _maxMetresPerTrip | unit in metre\\n     */\\n    function updateMaxMetresPerTrip(uint256 _maxMetresPerTrip)\\n        external\\n        isDriver\\n        notActive\\n    {\\n        addressToDriverReputation[msg.sender]\\n            .maxMetresPerTrip = _maxMetresPerTrip;\\n    }\\n\\n    /**\\n     * getTicket allows driver to accept passenger's ticket request\\n     *\\n     * @param _tixId Ticket ID\\n     * @param _useBadge allows driver to use any badge rank equal to or lower than current rank \\n     (this is to give driver the option of lower cosr per metre rates)\\n     *\\n     * @custom:event AcceptedTicket\\n     *\\n     * higher badge can charge higher price, but what if passenger always choose lower price?\\n     * (badgeToCostPerMetre[_badge], at RidePassenger.sol) then higher badge driver wont get chosen at all\\n     * solution: _useBadge that allows driver to choose which badge rank they want to use up to achieved badge rank\\n     * at frontend, default _useBadge to driver's current badge rank\\n     */\\n    function getTicket(bytes32 _tixId, uint256 _useBadge)\\n        external\\n        isDriver\\n        notActive\\n        notBan\\n    {\\n        uint256 driverScore = RideUtils._calculateScore(\\n            addressToDriverReputation[msg.sender].metresTravelled,\\n            addressToDriverReputation[msg.sender].countStart,\\n            addressToDriverReputation[msg.sender].countEnd,\\n            addressToDriverReputation[msg.sender].totalRating,\\n            addressToDriverReputation[msg.sender].countRating,\\n            RATING_MAX\\n        );\\n        uint256 driverBadge = _getBadge(driverScore);\\n        require(_useBadge <= driverBadge, \\\"badge rank not achieved\\\");\\n\\n        require(\\n            addressToDeposit[msg.sender] > tixIdToTicket[_tixId].fare,\\n            \\\"driver's deposit < fare\\\"\\n        );\\n        require(\\n            tixIdToTicket[_tixId].metres <=\\n                addressToDriverReputation[msg.sender].maxMetresPerTrip,\\n            \\\"trip too long\\\"\\n        );\\n        if (tixIdToTicket[_tixId].strict) {\\n            require(\\n                _useBadge == tixIdToTicket[_tixId].badge,\\n                \\\"driver not meet badge - strict\\\"\\n            );\\n        } else {\\n            require(\\n                _useBadge >= tixIdToTicket[_tixId].badge,\\n                \\\"driver not meet badge\\\"\\n            );\\n        }\\n\\n        tixIdToTicket[_tixId].driver = msg.sender;\\n        addressToActive[msg.sender] = true;\\n\\n        emit AcceptedTicket(_tixId, msg.sender); // --> update frontend (also, add warning that if passenger cancel, will incure fee)\\n    }\\n\\n    /**\\n     * cancelPickUp cancels pick up, can only be called before startTrip\\n     *\\n     * @param _tixId Ticket ID\\n     *\\n     * @custom:event DriverCancelled\\n     */\\n    function cancelPickUp(bytes32 _tixId)\\n        external\\n        driverMatchTixDriver(_tixId, msg.sender)\\n        tripNotStart(_tixId)\\n    {\\n        address passenger = tixIdToTicket[_tixId].passenger;\\n\\n        _transfer(_tixId, requestFee, msg.sender, passenger);\\n\\n        _cleanUp(_tixId, passenger, msg.sender);\\n\\n        emit DriverCancelled(_tixId, msg.sender); // --> update frontend\\n    }\\n\\n    /**\\n     * destinationReached allows driver to indicate to passenger to end trip and destination reached\\n     *\\n     * @param _tixId Ticket ID\\n     *\\n     * @custom:event DestinationReached\\n     */\\n    function destinationReached(bytes32 _tixId)\\n        external\\n        driverMatchTixDriver(_tixId, msg.sender)\\n        tripInProgress(_tixId)\\n    {\\n        tixToEndDetails[_tixId] = EndDetails({\\n            driver: msg.sender,\\n            reached: true\\n        });\\n\\n        emit DestinationReached(_tixId, msg.sender);\\n    }\\n\\n    /**\\n     * destinationNotReached allows driver to indicate to passenger to end trip and destination not reached\\n     *\\n     * @param _tixId Ticket ID\\n     *\\n     * @custom:event DestinationNotReached\\n     */\\n    function destinationNotReached(bytes32 _tixId)\\n        external\\n        driverMatchTixDriver(_tixId, msg.sender)\\n        tripInProgress(_tixId)\\n    {\\n        tixToEndDetails[_tixId] = EndDetails({\\n            driver: msg.sender,\\n            reached: false\\n        });\\n\\n        emit DestinationNotReached(_tixId, msg.sender);\\n    }\\n\\n    /**\\n     * forceEndDriver can be called after tixIdToTicket[_tixId].forceEndTimestamp duration\\n     * and if passenger has not called endTrip\\n     *\\n     * @param _tixId Ticket ID\\n     *\\n     * @custom:event ForceEndDriver\\n     *\\n     * no fare is paid, but passenger is temporarily banned for banDuration\\n     */\\n    function forceEndDriver(bytes32 _tixId)\\n        external\\n        driverMatchTixDriver(_tixId, msg.sender)\\n        tripInProgress(_tixId) /** means both parties still active */\\n        forceEndAllowed(_tixId)\\n    {\\n        require(\\n            tixToEndDetails[_tixId].driver != address(0),\\n            \\\"driver must end trip\\\"\\n        ); // TODO: test\\n        address passenger = tixIdToTicket[_tixId].passenger;\\n\\n        _temporaryBan(passenger);\\n        _cleanUp(_tixId, passenger, msg.sender);\\n\\n        emit ForceEndDriver(_tixId, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    ///// ---------------------------------------------------------------------- /////\\n    ///// ------------------------- internal functions ------------------------- /////\\n    ///// ---------------------------------------------------------------------- /////\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * _mint a driver ID\\n     *\\n     * @return driver ID\\n     */\\n    function _mint() internal returns (uint256) {\\n        uint256 id = _driverIdCounter.current();\\n        _driverIdCounter.increment();\\n        return id;\\n    }\\n\\n    /**\\n     * _burnFirstDriverId burns driver ID 0\\n     * can only be called at RideHub deployment\\n     */\\n    function _burnFirstDriverId() internal {\\n        assert(_driverIdCounter.current() == 0);\\n        _driverIdCounter.increment();\\n    }\\n}\\n\",\"keccak256\":\"0x56f7d3702172351de75d9b7f152fc1ae63003a233c450ead8c541d4460a2bfde\",\"license\":\"BUSL-1.1\"},\"contracts/ride/RideHub.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RideDriver.sol\\\";\\nimport \\\"./RidePassenger.sol\\\";\\n\\n/// @title Main contract for driver and passenger interaction\\ncontract RideHub is RideDriver, RidePassenger {\\n\\n}\\n\",\"keccak256\":\"0x02bccf8a259400a226f81e472b8d2d3511d9b679c02a6a0b228ed4e8817d4afa\",\"license\":\"BUSL-1.1\"},\"contracts/ride/RidePassenger.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RideBase.sol\\\";\\nimport \\\"./RideUtils.sol\\\";\\n\\n// import \\\"hardhat/console.sol\\\";\\n\\n/// @title Passenger component of RideHub\\ncontract RidePassenger is RideBase {\\n    event RequestTicket(bytes32 indexed tixId, address sender);\\n    event RequestCancelled(bytes32 indexed tixId, address sender);\\n    event TripStarted(bytes32 indexed tixId, address passenger, address driver);\\n    event TripEnded(bytes32 indexed tixId, address sender);\\n    event ForceEndPassenger(bytes32 indexed tixId, address sender);\\n\\n    modifier paxMatchTixPax(bytes32 _tixId, address _passenger) {\\n        require(\\n            _passenger == tixIdToTicket[_tixId].passenger,\\n            \\\"pax not match tix pax\\\"\\n        );\\n        _;\\n    }\\n\\n    /**\\n     * requestTicket allows passenger to request for ride\\n     *\\n     * @param _badge badge rank requested\\n     * @param _strict whether driver must meet requested badge rank exactly (true) or default - any badge rank equal or greater than (false)\\n     * @param _metres estimated distance from origin to destination as determined by Maps API\\n     * @param _minutes estimated time taken from origin to destination as determined by Maps API\\n     *\\n     * @custom:event RequestTicket\\n     */\\n    function requestTicket(\\n        uint256 _badge,\\n        bool _strict,\\n        uint256 _metres,\\n        uint256 _minutes\\n    ) external initializedRideBase notDriver notActive notBan {\\n        uint256 fare = RideUtils._getFare(\\n            baseFare,\\n            _metres,\\n            _minutes,\\n            badgeToCostPerMetre[_badge],\\n            costPerMinute\\n        );\\n        require(\\n            addressToDeposit[msg.sender] > fare,\\n            \\\"passenger's deposit < fare\\\"\\n        );\\n\\n        bytes32 tixId = keccak256(abi.encode(msg.sender, block.timestamp));\\n\\n        tixIdToTicket[tixId].passenger = msg.sender;\\n        tixIdToTicket[tixId].badge = _badge;\\n        tixIdToTicket[tixId].strict = _strict;\\n        tixIdToTicket[tixId].metres = _metres;\\n        tixIdToTicket[tixId].fare = fare;\\n\\n        addressToActive[msg.sender] = true;\\n\\n        emit RequestTicket(tixId, msg.sender);\\n    }\\n\\n    /**\\n     * cancelRequest cancels ticket, can only be called before startTrip\\n     *\\n     * @param _tixId Ticket ID\\n     *\\n     * @custom:event RequestCancelled\\n     */\\n    function cancelRequest(bytes32 _tixId)\\n        external\\n        paxMatchTixPax(_tixId, msg.sender)\\n        tripNotStart(_tixId)\\n    {\\n        address driver = tixIdToTicket[_tixId].driver;\\n        if (driver != address(0)) {\\n            // case when cancel inbetween driver accepted, but haven't reach passenger\\n            // give warning at frontend to passenger\\n            _transfer(_tixId, requestFee, msg.sender, driver);\\n        }\\n\\n        _cleanUp(_tixId, msg.sender, driver);\\n\\n        emit RequestCancelled(_tixId, msg.sender); // --> update frontend request pool\\n    }\\n\\n    /**\\n     * startTrip starts the trip, can only be called once driver reached passenger\\n     *\\n     * @param _tixId Ticket ID\\n     * @param _driver driver's address - get via QR scan?\\n     *\\n     * @custom:event TripStarted\\n     */\\n    function startTrip(bytes32 _tixId, address _driver)\\n        external\\n        paxMatchTixPax(_tixId, msg.sender)\\n        driverMatchTixDriver(_tixId, _driver)\\n        tripNotStart(_tixId)\\n    {\\n        addressToDriverReputation[_driver].countStart += 1;\\n        tixIdToTicket[_tixId].tripStart = true;\\n        tixIdToTicket[_tixId].forceEndTimestamp = block.timestamp + 1 days;\\n\\n        emit TripStarted(_tixId, msg.sender, _driver); // update frontend\\n    }\\n\\n    /**\\n     * endTrip ends the trip, can only be called once driver has called either destinationReached or destinationNotReached\\n     *\\n     * @param _tixId Ticket ID\\n     * @param _confirmation confirmation from passenger that either destination has been reached or not\\n     * @param _rating refer _giveRating\\n     *\\n     * @custom:event TripEnded\\n     *\\n     * driver would select destination reached or not, and event will emit to passenger's UI\\n     * then passenger would confirm if this is true or false (via frontend UI), followed by a rating\\n     */\\n    function endTrip(\\n        bytes32 _tixId,\\n        bool _confirmation,\\n        uint256 _rating\\n    ) external paxMatchTixPax(_tixId, msg.sender) tripInProgress(_tixId) {\\n        address driver = tixToEndDetails[_tixId].driver;\\n        require(driver != address(0), \\\"driver must end trip\\\");\\n        require(\\n            _confirmation,\\n            \\\"pax must confirm destination reached or not - indicated by driver\\\"\\n        );\\n\\n        if (tixToEndDetails[_tixId].reached) {\\n            _transfer(_tixId, tixIdToTicket[_tixId].fare, msg.sender, driver);\\n            addressToDriverReputation[driver].metresTravelled += tixIdToTicket[\\n                _tixId\\n            ].metres;\\n            addressToDriverReputation[driver].countEnd += 1;\\n        }\\n\\n        _giveRating(driver, _rating);\\n\\n        _cleanUp(_tixId, msg.sender, driver);\\n\\n        emit TripEnded(_tixId, msg.sender);\\n    }\\n\\n    /**\\n     * forceEndPassenger can be called after tixIdToTicket[_tixId].forceEndTimestamp duration\\n     * and if driver has not called destinationReached or destinationNotReached\\n     *\\n     * @param _tixId Ticket ID\\n     *\\n     * @custom:event ForceEndPassenger\\n     *\\n     * no fare is paid, but driver is temporarily banned for banDuration\\n     */\\n    function forceEndPassenger(bytes32 _tixId)\\n        external\\n        paxMatchTixPax(_tixId, msg.sender)\\n        tripInProgress(_tixId) /** means both parties still active */\\n        forceEndAllowed(_tixId)\\n    {\\n        require(\\n            tixToEndDetails[_tixId].driver == address(0),\\n            \\\"driver ended trip\\\"\\n        ); // TODO: test\\n        address driver = tixIdToTicket[_tixId].driver;\\n\\n        _temporaryBan(driver);\\n        _giveRating(driver, 1);\\n        _cleanUp(_tixId, msg.sender, driver);\\n\\n        emit ForceEndPassenger(_tixId, msg.sender);\\n    }\\n\\n    //////////////////////////////////////////////////////////////////////////////////\\n    ///// ---------------------------------------------------------------------- /////\\n    ///// ------------------------- internal functions ------------------------- /////\\n    ///// ---------------------------------------------------------------------- /////\\n    //////////////////////////////////////////////////////////////////////////////////\\n\\n    /**\\n     * _giveRating\\n     *\\n     * @param _driver driver's address\\n     * @param _rating unitless integer between RATING_MIN and RATING_MAX\\n     *\\n     * @custom:event TripStarted\\n     */\\n    function _giveRating(address _driver, uint256 _rating) internal {\\n        require(_rating >= RATING_MIN && _rating <= RATING_MAX); // TODO: contract exceeds size limit when add error msg\\n        addressToDriverReputation[_driver].totalRating += _rating;\\n        addressToDriverReputation[_driver].countRating += 1;\\n    }\\n}\\n\",\"keccak256\":\"0x9763862284d68370e801160a3f748e8aeae3ad82656dc5222914b8ba130925c6\",\"license\":\"BUSL-1.1\"},\"contracts/ride/RideUtils.sol\":{\"content\":\"//SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/// @title Utility functions for RideHub\\nlibrary RideUtils {\\n    /**\\n     * _getFare calculates the fare of a trip.\\n     *\\n     * @param _baseFare        | unit in token\\n     * @param _metresTravelled | unit in metre\\n     * @param _minutesTaken    | unit in minute\\n     * @param _costPerMetre    | unit in token\\n     * @param _costPerMinute   | unit in token\\n     *\\n     * @return Fare | unit in token\\n     *\\n     * _metresTravelled and _minutesTaken are rounded down,\\n     * for example, if _minutesTaken is 1.5 minutes (90 seconds) then round to 1 minute\\n     * if _minutesTaken is 0.5 minutes (30 seconds) then round to 0 minute\\n     */\\n    function _getFare(\\n        uint256 _baseFare,\\n        uint256 _metresTravelled,\\n        uint256 _minutesTaken,\\n        uint256 _costPerMetre,\\n        uint256 _costPerMinute\\n    ) internal pure returns (uint256) {\\n        return (_baseFare +\\n            (_metresTravelled * _costPerMetre) +\\n            (_minutesTaken * _costPerMinute));\\n    }\\n\\n    /**\\n     * _calculateScore calculates score from driver's reputation details (see params of function)\\n     *\\n     * @param _metresTravelled | unit in metre\\n     * @param _countStart      | unitless integer\\n     * @param _countEnd        | unitless integer\\n     * @param _totalRating     | unitless integer\\n     * @param _countRating     | unitless integer\\n     * @param _maxRating       | unitless integer\\n     *\\n     * @return Driver's score to determine badge rank | unitless integer\\n     *\\n     * Derive Driver's Score Formula:-\\n     *\\n     * Score is fundamentally determined based on distance travelled, where the more trips a driver makes,\\n     * the higher the score. Thus, the base score is directly proportional to:\\n     *\\n     * _metresTravelled\\n     *\\n     * where _metresTravelled is the total cumulative distance covered by the driver over all trips made.\\n     *\\n     * To encourage the completion of trips, the base score would be penalized by the amount of incomplete\\n     * trips, using:\\n     *\\n     *  _countEnd / _countStart\\n     *\\n     * which is the ratio of number of trips complete to the number of trips started. This gives:\\n     *\\n     * _metresTravelled * (_countEnd / _countStart)\\n     *\\n     * Driver score should also be influenced by passenger's rating of the overall trip, thus, the base\\n     * score is further penalized by the average driver rating over all trips, given by:\\n     *\\n     * _totalRating / _countRating\\n     *\\n     * where _totalRating is the cumulative rating value by passengers over all trips and _countRating is\\n     * the total number of rates by those passengers. The rating penalization is also divided by the max\\n     * possible rating score to make the penalization a ratio:\\n     *\\n     * (_totalRating / _countRating) / _maxRating\\n     *\\n     * The score formula is given by:\\n     *\\n     * _metresTravelled * (_countEnd / _countStart) * ((_totalRating / _countRating) / _maxRating)\\n     *\\n     * which simplifies to:\\n     *\\n     * (_metresTravelled * _countEnd * _totalRating) / (_countStart * _countRating * _maxRating)\\n     *\\n     * note: Solidity rounds down return value to the nearest whole number.\\n     *\\n     * note: Score is used to determine badge rank. To determine which score corresponds to which rank,\\n     *       can just determine from _metresTravelled, as other variables are just penalization factors.\\n     */\\n    function _calculateScore(\\n        uint256 _metresTravelled,\\n        uint256 _countStart,\\n        uint256 _countEnd,\\n        uint256 _totalRating,\\n        uint256 _countRating,\\n        uint256 _maxRating\\n    ) internal pure returns (uint256) {\\n        if (_countStart == 0) {\\n            return 0;\\n        } else {\\n            return\\n                (_metresTravelled * _countEnd * _totalRating) /\\n                (_countStart * _countRating * _maxRating);\\n        }\\n    }\\n\\n    // function _shuffle(bytes32[] memory _value, uint256 _randomNumber)\\n    //     internal\\n    //     pure\\n    //     returns (bytes32[] memory)\\n    // {\\n    //     for (uint256 i = 0; i < _value.length; i++) {\\n    //         uint256 n = i + (_randomNumber % (_value.length - i)); // uint256(keccak256(abi.encodePacked(block.timestamp)))\\n    //         bytes32 temp = _value[n];\\n    //         _value[n] = _value[i];\\n    //         _value[i] = temp;\\n    //     }\\n    //     return _value;\\n    // }\\n}\\n\",\"keccak256\":\"0x414340ea39207918bb4994864e6681082b57b0ff1429172e14644243bf44cdf4\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102275760003560e01c8063a221a14f11610130578063eacd7883116100b8578063f1cce80f1161007c578063f1cce80f14610613578063f2fde38b1461062f578063f430d4b71461064b578063fc0c546a14610667578063ffb9c43f1461068557610227565b8063eacd788314610571578063eb2e578b1461058d578063eb755bfb146105ab578063ee825966146105db578063f198c4c4146105f757610227565b8063c8f891a0116100ff578063c8f891a0146104e5578063d6d38a2014610501578063d90d1f4f1461051d578063dcca003214610539578063df3f46fe1461055557610227565b8063a221a14f14610471578063a508889f1461047b578063afa14ba614610499578063b1a80188146104b557610227565b8063581e93d9116101b35780638048b65b116101825780638048b65b146103b457806384831e15146103eb5780638c20020c146104075780638da5cb5b146104375780639d0123511461045557610227565b8063581e93d91461035657806360a959051461037257806366fac4391461038e578063715018a6146103aa57610227565b806333923862116101fa57806333923862146102b45780633baa9868146102d0578063426d3cd6146102ec57806348c215d71461030a578063501255461461033a57610227565b8063043e0ec01461022c5780630a419e04146102485780630b506b0114610278578063158ef93e14610296575b600080fd5b610246600480360381019061024191906148ce565b6106a1565b005b610262600480360381019061025d9190614719565b610943565b60405161026f9190615465565b60405180910390f35b61028061095b565b60405161028d9190615465565b60405180910390f35b61029e610961565b6040516102ab919061500f565b60405180910390f35b6102ce60048036038101906102c991906149be565b610974565b005b6102ea60048036038101906102e591906149be565b610c7d565b005b6102f4610d03565b6040516103019190615465565b60405180910390f35b610324600480360381019061031f91906149be565b610d09565b6040516103319190615465565b60405180910390f35b610354600480360381019061034f91906148ce565b610d21565b005b610370600480360381019061036b91906149be565b610ef4565b005b61038c60048036038101906103879190614933565b610f7a565b005b6103a860048036038101906103a39190614864565b6112da565b005b6103b2611421565b005b6103ce60048036038101906103c99190614719565b6114a9565b6040516103e29897969594939291906154b7565b60405180910390f35b61040560048036038101906104009190614810565b611579565b005b610421600480360381019061041c91906149be565b611767565b60405161042e9190615465565b60405180910390f35b61043f61177f565b60405161044c9190614f6b565b60405180910390f35b61046f600480360381019061046a9190614742565b6117a8565b005b6104796119df565b005b610483611dab565b6040516104909190615465565b60405180910390f35b6104b360048036038101906104ae9190614982565b611db1565b005b6104cf60048036038101906104ca9190614719565b6123f0565b6040516104dc919061500f565b60405180910390f35b6104ff60048036038101906104fa91906149be565b612410565b005b61051b60048036038101906105169190614864565b612496565b005b61053760048036038101906105329190614a10565b6125d1565b005b610553600480360381019061054e91906148ce565b6129f6565b005b61056f600480360381019061056a91906148ce565b612c8e565b005b61058b600480360381019061058691906149be565b612e81565b005b610595612fde565b6040516105a29190615465565b60405180910390f35b6105c560048036038101906105c09190614719565b612fe4565b6040516105d29190615465565b60405180910390f35b6105f560048036038101906105f091906148ce565b612ffc565b005b610611600480360381019061060c91906149be565b6131ef565b005b61062d600480360381019061062891906148f7565b613689565b005b61064960048036038101906106449190614719565b61392f565b005b610665600480360381019061066091906148ce565b613a27565b005b61066f613bc5565b60405161067c919061502a565b60405180910390f35b61069f600480360381019061069a91906149be565b613beb565b005b8033600d600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610747576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073e90615345565b60405180910390fd5b82600d600082815260200190815260200160002060060160009054906101000a900460ff166107ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a2906153c5565b60405180910390fd5b83600d6000828152602001908152602001600020600701544211610804576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107fb90615385565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600e600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a0906153a5565b60405180910390fd5b6000600d600087815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506108ed81613c95565b6108f8816001613d28565b610903863383613dfa565b857f17c6c278f459b1900e63c8ee1091fffd94fc74a938aadd12d8e3b3c9c11e6846336040516109339190614f6b565b60405180910390a2505050505050565b60096020528060005260406000206000915090505481565b60035481565b600860169054906101000a900460ff1681565b600860169054906101000a900460ff166109c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ba90615185565b60405180910390fd5b60008111610a06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109fd90615305565b60405180910390fd5b80600860029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401610a64929190614f86565b60206040518083038186803b158015610a7c57600080fd5b505afa158015610a90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab491906149e7565b1015610af5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610aec906151a5565b60405180910390fd5b6000600860029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b8152600401610b5693929190614faf565b602060405180830381600087803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ba891906148a5565b905080610bea576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be190615225565b60405180910390fd5b81600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c3991906155da565b925050819055507f59062170a285eb80e8c6b8ced60428442a51910635005233fc4ce084a475845e3383604051610c71929190614fe6565b60405180910390a15050565b610c85613fd9565b73ffffffffffffffffffffffffffffffffffffffff16610ca361177f565b73ffffffffffffffffffffffffffffffffffffffff1614610cf9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cf0906152a5565b60405180910390fd5b8060048190555050565b60055481565b60016020528060005260406000206000915090505481565b8033600d600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610dc7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610dbe90615345565b60405180910390fd5b82600d600082815260200190815260200160002060060160009054906101000a900460ff1615610e2c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e2390615125565b60405180910390fd5b6000600d600086815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610eaa57610ea9856002543384613fe1565b5b610eb5853383613dfa565b847f3667686a5d1134075618aaef5b7a2c48b739b95068ebf8770322f60dec3148c733604051610ee59190614f6b565b60405180910390a25050505050565b610efc613fd9565b73ffffffffffffffffffffffffffffffffffffffff16610f1a61177f565b73ffffffffffffffffffffffffffffffffffffffff1614610f70576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f67906152a5565b60405180910390fd5b8060058190555050565b8233600d600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614611020576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161101790615345565b60405180910390fd5b84600d600082815260200190815260200160002060060160009054906101000a900460ff16611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b906153c5565b60405180910390fd5b6000600e600088815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16141561112f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112690615285565b60405180910390fd5b8561116f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116690615105565b60405180910390fd5b600e600088815260200190815260200160002060000160149054906101000a900460ff1615611284576111ba87600d60008a8152602001908152602001600020600501543384613fe1565b600d600088815260200190815260200160002060040154600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301600082825461122291906155da565b925050819055506001600c60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501600082825461127c91906155da565b925050819055505b61128e8186613d28565b611299873383613dfa565b867f953fd24b0880aae7dd24c3d0003e9517aabdd0dfbdf822cb45b8b0fa756ffdbb336040516112c99190614f6b565b60405180910390a250505050505050565b6112e2613fd9565b73ffffffffffffffffffffffffffffffffffffffff1661130061177f565b73ffffffffffffffffffffffffffffffffffffffff1614611356576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161134d906152a5565b60405180910390fd5b6001600661136491906156bb565b8151146113a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161139d906150a5565b60405180910390fd5b60005b815181101561141d578181815181106113eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600160008381526020019081526020016000208190555080806114159061580a565b9150506113a9565b5050565b611429613fd9565b73ffffffffffffffffffffffffffffffffffffffff1661144761177f565b73ffffffffffffffffffffffffffffffffffffffff161461149d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611494906152a5565b60405180910390fd5b6114a760006140cf565b565b600c6020528060005260406000206000915090508060000154908060010180546114d2906157a7565b80601f01602080910402602001604051908101604052809291908181526020018280546114fe906157a7565b801561154b5780601f106115205761010080835404028352916020019161154b565b820191906000526020600020905b81548152906001019060200180831161152e57829003601f168201915b5050505050908060020154908060030154908060040154908060050154908060060154908060070154905088565b611581613fd9565b73ffffffffffffffffffffffffffffffffffffffff1661159f61177f565b73ffffffffffffffffffffffffffffffffffffffff16146115f5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115ec906152a5565b60405180910390fd5b600860169054906101000a900460ff16611644576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161163b90615185565b60405180910390fd5b6000600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001018054611693906157a7565b9050146116d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116cc906153e5565b60405180910390fd5b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101908051906020019061172b9291906144fa565b507fb1533e26d96c1f2d75a4c8f751c76096c94306eed19d8015006bbd4527777ada8260405161175b9190614f6b565b60405180910390a15050565b60066020528060005260406000206000915090505481565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6117b0613fd9565b73ffffffffffffffffffffffffffffffffffffffff166117ce61177f565b73ffffffffffffffffffffffffffffffffffffffff1614611824576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161181b906152a5565b60405180910390fd5b600860019054906101000a900460ff1661184e57600860009054906101000a900460ff1615611857565b611856614193565b5b611896576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188d90615205565b60405180910390fd5b6000600860019054906101000a900460ff1615905080156118e8576001600860016101000a81548160ff0219169083151502179055506001600860006101000a81548160ff0219169083151502179055505b87600860026101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611932876112da565b61193b86613beb565b61194485612410565b61194d84612496565b61195683610c7d565b61195f82610ef4565b6001600860166101000a81548160ff0219169083151502179055507f400f6b1a8ac20900f38f2c329b9bc16ea6924570743c39dcfe349ff5f5a4571e88336040516119ab929190614f86565b60405180910390a180156119d5576000600860016101000a81548160ff0219169083151502179055505b5050505050505050565b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a6c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6390615065565b60405180910390fd5b60026007541415611ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aa990615405565b60405180910390fd5b60026007819055506000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008111611b41576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b38906150c5565b60405180910390fd5b80600860029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611b9d9190614f6b565b60206040518083038186803b158015611bb557600080fd5b505afa158015611bc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bed91906149e7565b1015611c2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c2590615265565b60405180910390fd5b6000600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055506000600860029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b8152600401611cd2929190614fe6565b602060405180830381600087803b158015611cec57600080fd5b505af1158015611d00573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d2491906148a5565b905080611d66576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5d90615225565b60405180910390fd5b7f079bee7f865179f632bcb69702978d375656a5decc8ca5fc5c3acc636412e35d3383604051611d97929190614fe6565b60405180910390a150506001600781905550565b60045481565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541415611e37576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e2e906152e5565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611ec4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ebb90615065565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054421015611f46576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611f3d90615445565b60405180910390fd5b60006120a1600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060030154600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060040154600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060050154600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060060154600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007015460056141a4565b905060006120ae826141fc565b9050808311156120f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120ea906151c5565b60405180910390fd5b600d600085815260200190815260200160002060050154600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161218a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161218190615165565b60405180910390fd5b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020154600d6000868152602001908152602001600020600401541115612225576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161221c90615145565b60405180910390fd5b600d600085815260200190815260200160002060030160009054906101000a900460ff16156122ab57600d60008581526020019081526020016000206002015483146122a6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161229d90615325565b60405180910390fd5b612305565b600d600085815260200190815260200160002060020154831015612304576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122fb90615085565b60405180910390fd5b5b33600d600086815260200190815260200160002060010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550837f86ad7a06ce4c45e063baf910fa2b80610c2d5458bfa90528251c457774f0719e336040516123e29190614f6b565b60405180910390a250505050565b600a6020528060005260406000206000915054906101000a900460ff1681565b612418613fd9565b73ffffffffffffffffffffffffffffffffffffffff1661243661177f565b73ffffffffffffffffffffffffffffffffffffffff161461248c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612483906152a5565b60405180910390fd5b8060038190555050565b61249e613fd9565b73ffffffffffffffffffffffffffffffffffffffff166124bc61177f565b73ffffffffffffffffffffffffffffffffffffffff1614612512576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612509906152a5565b60405180910390fd5b6006815114612556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161254d90615365565b60405180910390fd5b60005b81518110156125cd5781818151811061259b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600660008381526020019081526020016000208190555080806125c59061580a565b915050612559565b5050565b600860169054906101000a900460ff16612620576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161261790615185565b60405180910390fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146126a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161269c90615045565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612732576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161272990615065565b60405180910390fd5b600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020544210156127b4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127ab90615445565b60405180910390fd5b60006127da6003548484600660008a81526020019081526020016000205460045461448d565b905080600960003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541161285d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612854906152c5565b60405180910390fd5b60003342604051602001612872929190614fe6565b60405160208183030381529060405280519060200120905033600d600083815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555085600d60008381526020019081526020016000206002018190555084600d600083815260200190815260200160002060030160006101000a81548160ff02191690831515021790555083600d60008381526020019081526020016000206004018190555081600d6000838152602001908152602001600020600501819055506001600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550807fe67037d840985843f57cccc6c09e037a44feb0a0eecea0fffa84bd13dccacdc3336040516129e69190614f6b565b60405180910390a2505050505050565b8033600d600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612a9c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a9390615245565b60405180910390fd5b82600d600082815260200190815260200160002060060160009054906101000a900460ff16612b00576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612af7906153c5565b60405180910390fd5b83600d6000828152602001908152602001600020600701544211612b59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b5090615385565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff16600e600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415612bff576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bf690615285565b60405180910390fd5b6000600d600087815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050612c4381613c95565b612c4e868233613dfa565b857f25de7201103d9ec15bbd7bf28cf115f177cb825ff20dba14e5fcbf9e8b8b7e4133604051612c7e9190614f6b565b60405180910390a2505050505050565b8033600d600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614612d34576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d2b90615245565b60405180910390fd5b82600d600082815260200190815260200160002060060160009054906101000a900460ff16612d98576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612d8f906153c5565b60405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160001515815250600e600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550905050837f8419a4d89b40313b65bdda46d9a72c13ac4079cf4d68014124db04caa3ad429833604051612e739190614f6b565b60405180910390a250505050565b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541415612f07576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612efe906152e5565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615612f94576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612f8b90615065565b60405180910390fd5b80600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018190555050565b60025481565b600b6020528060005260406000206000915090505481565b8033600d600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146130a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161309990615245565b60405180910390fd5b82600d600082815260200190815260200160002060060160009054906101000a900460ff16613106576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016130fd906153c5565b60405180910390fd5b60405180604001604052803373ffffffffffffffffffffffffffffffffffffffff16815260200160011515815250600e600086815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060208201518160000160146101000a81548160ff021916908315150217905550905050837f6951529fbda047fcef1691aee17f8f750d7c24022195ac27638f49a0c7741348336040516131e19190614f6b565b60405180910390a250505050565b600860169054906101000a900460ff1661323e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161323590615185565b60405180910390fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154146132c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016132ba90615045565b60405180910390fd5b600a60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615613350576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161334790615065565b60405180910390fd5b6000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101805461339f906157a7565b905014156133e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016133d990615425565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161415613452576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613449906151e5565b60405180910390fd5b61345a6144c7565b600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555080600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600301819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600501819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600601819055506000600c60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600701819055507fbe5e7a1c543800c6abb49749a131598b050660d403a09b2e31318c2048c00d743360405161367e9190614f6b565b60405180910390a150565b8133600d600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461372f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161372690615345565b60405180910390fd5b8383600d600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146137d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016137cc90615245565b60405180910390fd5b85600d600082815260200190815260200160002060060160009054906101000a900460ff161561383a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161383190615125565b60405180910390fd5b6001600c60008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600401600082825461388d91906155da565b925050819055506001600d600089815260200190815260200160002060060160006101000a81548160ff02191690831515021790555062015180426138d291906155da565b600d600089815260200190815260200160002060070181905550867f211b9525d8a81f35ff677202e79a7323adb7eefdb5bc632fd16e04049b91c5e0338860405161391e929190614f86565b60405180910390a250505050505050565b613937613fd9565b73ffffffffffffffffffffffffffffffffffffffff1661395561177f565b73ffffffffffffffffffffffffffffffffffffffff16146139ab576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016139a2906152a5565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415613a1b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613a12906150e5565b60405180910390fd5b613a24816140cf565b50565b8033600d600083815260200190815260200160002060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614613acd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613ac490615245565b60405180910390fd5b82600d600082815260200190815260200160002060060160009054906101000a900460ff1615613b32576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613b2990615125565b60405180910390fd5b6000600d600086815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050613b7b856002543384613fe1565b613b86858233613dfa565b847fe17f34d2c6ecc6d82594e456bffbd149f6ac303a508df3d3b31a84bf85425c4f33604051613bb69190614f6b565b60405180910390a25050505050565b600860029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b613bf3613fd9565b73ffffffffffffffffffffffffffffffffffffffff16613c1161177f565b73ffffffffffffffffffffffffffffffffffffffff1614613c67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401613c5e906152a5565b60405180910390fd5b8060028190555050565b600081600001549050919050565b6001816000016000828254019250508190555050565b600060055442613ca591906155da565b905080600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055507fd47d10d20745ca261609da04f2be5d753e72753697166d0788294a90f63385ce8282604051613d1c929190614fe6565b60405180910390a15050565b60018110158015613d3a575060058111155b613d4357600080fd5b80600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206006016000828254613d9591906155da565b925050819055506001600c60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206007016000828254613def91906155da565b925050819055505050565b600d6000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905560028201600090556003820160006101000a81549060ff0219169055600482016000905560058201600090556006820160006101000a81549060ff021916905560078201600090555050600e6000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556000820160146101000a81549060ff021916905550506000600a60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff021916908315150217905550827f09ce1eed6c20178273440ba383abc5ceafff4cc0aa7987a23bc8b9476913df3e60405160405180910390a2505050565b600033905090565b82600960008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461403091906156bb565b9250508190555082600960008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461408691906155da565b92505081905550837f8402bb2bd66eafaadbf985b28056584fe3d3a669214dd19fe1c0f759aaef35f08484846040516140c193929190615480565b60405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600061419e306144e7565b15905090565b6000808614156141b757600090506141f2565b8183876141c49190615661565b6141ce9190615661565b8486896141db9190615661565b6141e59190615661565b6141ef9190615630565b90505b9695505050505050565b6000600160008081526020019081526020016000205482116142595760006005811115614252577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050614488565b60016000808152602001908152602001600020548211801561428f57506001600060018152602001908152602001600020548211155b156142d557600160058111156142ce577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050614488565b6001600060018152602001908152602001600020548211801561430c57506001600060028152602001908152602001600020548211155b15614352576002600581111561434b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050614488565b6001600060028152602001908152602001600020548211801561438957506001600060038152602001908152602001600020548211155b156143cf57600360058111156143c8577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050614488565b6001600060038152602001908152602001600020548211801561440657506001600060048152602001908152602001600020548211155b1561444c5760046005811115614445577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b9050614488565b600580811115614485577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90505b919050565b6000818461449b9190615661565b83866144a79190615661565b876144b291906155da565b6144bc91906155da565b905095945050505050565b6000806144d4600f613c71565b90506144e0600f613c7f565b8091505090565b600080823b905060008111915050919050565b828054614506906157a7565b90600052602060002090601f016020900481019282614528576000855561456f565b82601f1061454157805160ff191683800117855561456f565b8280016001018555821561456f579182015b8281111561456e578251825591602001919060010190614553565b5b50905061457c9190614580565b5090565b5b80821115614599576000816000905550600101614581565b5090565b60006145b06145ab84615561565b61553c565b905080838252602082019050828560208602820111156145cf57600080fd5b60005b858110156145ff57816145e588826146ef565b8452602084019350602083019250506001810190506145d2565b5050509392505050565b600061461c6146178461558d565b61553c565b90508281526020810184848401111561463457600080fd5b61463f848285615765565b509392505050565b60008135905061465681615f4d565b92915050565b600082601f83011261466d57600080fd5b813561467d84826020860161459d565b91505092915050565b60008135905061469581615f64565b92915050565b6000815190506146aa81615f64565b92915050565b6000813590506146bf81615f7b565b92915050565b600082601f8301126146d657600080fd5b81356146e6848260208601614609565b91505092915050565b6000813590506146fe81615f92565b92915050565b60008151905061471381615f92565b92915050565b60006020828403121561472b57600080fd5b600061473984828501614647565b91505092915050565b600080600080600080600060e0888a03121561475d57600080fd5b600061476b8a828b01614647565b975050602088013567ffffffffffffffff81111561478857600080fd5b6147948a828b0161465c565b96505060406147a58a828b016146ef565b95505060606147b68a828b016146ef565b945050608088013567ffffffffffffffff8111156147d357600080fd5b6147df8a828b0161465c565b93505060a06147f08a828b016146ef565b92505060c06148018a828b016146ef565b91505092959891949750929550565b6000806040838503121561482357600080fd5b600061483185828601614647565b925050602083013567ffffffffffffffff81111561484e57600080fd5b61485a858286016146c5565b9150509250929050565b60006020828403121561487657600080fd5b600082013567ffffffffffffffff81111561489057600080fd5b61489c8482850161465c565b91505092915050565b6000602082840312156148b757600080fd5b60006148c58482850161469b565b91505092915050565b6000602082840312156148e057600080fd5b60006148ee848285016146b0565b91505092915050565b6000806040838503121561490a57600080fd5b6000614918858286016146b0565b925050602061492985828601614647565b9150509250929050565b60008060006060848603121561494857600080fd5b6000614956868287016146b0565b935050602061496786828701614686565b9250506040614978868287016146ef565b9150509250925092565b6000806040838503121561499557600080fd5b60006149a3858286016146b0565b92505060206149b4858286016146ef565b9150509250929050565b6000602082840312156149d057600080fd5b60006149de848285016146ef565b91505092915050565b6000602082840312156149f957600080fd5b6000614a0784828501614704565b91505092915050565b60008060008060808587031215614a2657600080fd5b6000614a34878288016146ef565b9450506020614a4587828801614686565b9350506040614a56878288016146ef565b9250506060614a67878288016146ef565b91505092959194509250565b614a7c816156ef565b82525050565b614a8b81615701565b82525050565b614a9a81615741565b82525050565b6000614aab826155be565b614ab581856155c9565b9350614ac5818560208601615774565b614ace8161590f565b840191505092915050565b6000614ae66010836155c9565b9150614af182615920565b602082019050919050565b6000614b096010836155c9565b9150614b1482615949565b602082019050919050565b6000614b2c6015836155c9565b9150614b3782615972565b602082019050919050565b6000614b4f6032836155c9565b9150614b5a8261599b565b604082019050919050565b6000614b72600d836155c9565b9150614b7d826159ea565b602082019050919050565b6000614b956026836155c9565b9150614ba082615a13565b604082019050919050565b6000614bb86041836155c9565b9150614bc382615a62565b606082019050919050565b6000614bdb6014836155c9565b9150614be682615ad7565b602082019050919050565b6000614bfe600d836155c9565b9150614c0982615b00565b602082019050919050565b6000614c216017836155c9565b9150614c2c82615b29565b602082019050919050565b6000614c446011836155c9565b9150614c4f82615b52565b602082019050919050565b6000614c676015836155c9565b9150614c7282615b7b565b602082019050919050565b6000614c8a6017836155c9565b9150614c9582615ba4565b602082019050919050565b6000614cad6009836155c9565b9150614cb882615bcd565b602082019050919050565b6000614cd0602e836155c9565b9150614cdb82615bf6565b604082019050919050565b6000614cf36009836155c9565b9150614cfe82615c45565b602082019050919050565b6000614d16601b836155c9565b9150614d2182615c6e565b602082019050919050565b6000614d39601b836155c9565b9150614d4482615c97565b602082019050919050565b6000614d5c6014836155c9565b9150614d6782615cc0565b602082019050919050565b6000614d7f6020836155c9565b9150614d8a82615ce9565b602082019050919050565b6000614da2601a836155c9565b9150614dad82615d12565b602082019050919050565b6000614dc56011836155c9565b9150614dd082615d3b565b602082019050919050565b6000614de86008836155c9565b9150614df382615d64565b602082019050919050565b6000614e0b601e836155c9565b9150614e1682615d8d565b602082019050919050565b6000614e2e6015836155c9565b9150614e3982615db6565b602082019050919050565b6000614e516029836155c9565b9150614e5c82615ddf565b604082019050919050565b6000614e746009836155c9565b9150614e7f82615e2e565b602082019050919050565b6000614e976011836155c9565b9150614ea282615e57565b602082019050919050565b6000614eba6010836155c9565b9150614ec582615e80565b602082019050919050565b6000614edd600f836155c9565b9150614ee882615ea9565b602082019050919050565b6000614f00601f836155c9565b9150614f0b82615ed2565b602082019050919050565b6000614f236017836155c9565b9150614f2e82615efb565b602082019050919050565b6000614f46600c836155c9565b9150614f5182615f24565b602082019050919050565b614f6581615737565b82525050565b6000602082019050614f806000830184614a73565b92915050565b6000604082019050614f9b6000830185614a73565b614fa86020830184614a73565b9392505050565b6000606082019050614fc46000830186614a73565b614fd16020830185614a73565b614fde6040830184614f5c565b949350505050565b6000604082019050614ffb6000830185614a73565b6150086020830184614f5c565b9392505050565b60006020820190506150246000830184614a82565b92915050565b600060208201905061503f6000830184614a91565b92915050565b6000602082019050818103600083015261505e81614ad9565b9050919050565b6000602082019050818103600083015261507e81614afc565b9050919050565b6000602082019050818103600083015261509e81614b1f565b9050919050565b600060208201905081810360008301526150be81614b42565b9050919050565b600060208201905081810360008301526150de81614b65565b9050919050565b600060208201905081810360008301526150fe81614b88565b9050919050565b6000602082019050818103600083015261511e81614bab565b9050919050565b6000602082019050818103600083015261513e81614bce565b9050919050565b6000602082019050818103600083015261515e81614bf1565b9050919050565b6000602082019050818103600083015261517e81614c14565b9050919050565b6000602082019050818103600083015261519e81614c37565b9050919050565b600060208201905081810360008301526151be81614c5a565b9050919050565b600060208201905081810360008301526151de81614c7d565b9050919050565b600060208201905081810360008301526151fe81614ca0565b9050919050565b6000602082019050818103600083015261521e81614cc3565b9050919050565b6000602082019050818103600083015261523e81614ce6565b9050919050565b6000602082019050818103600083015261525e81614d09565b9050919050565b6000602082019050818103600083015261527e81614d2c565b9050919050565b6000602082019050818103600083015261529e81614d4f565b9050919050565b600060208201905081810360008301526152be81614d72565b9050919050565b600060208201905081810360008301526152de81614d95565b9050919050565b600060208201905081810360008301526152fe81614db8565b9050919050565b6000602082019050818103600083015261531e81614ddb565b9050919050565b6000602082019050818103600083015261533e81614dfe565b9050919050565b6000602082019050818103600083015261535e81614e21565b9050919050565b6000602082019050818103600083015261537e81614e44565b9050919050565b6000602082019050818103600083015261539e81614e67565b9050919050565b600060208201905081810360008301526153be81614e8a565b9050919050565b600060208201905081810360008301526153de81614ead565b9050919050565b600060208201905081810360008301526153fe81614ed0565b9050919050565b6000602082019050818103600083015261541e81614ef3565b9050919050565b6000602082019050818103600083015261543e81614f16565b9050919050565b6000602082019050818103600083015261545e81614f39565b9050919050565b600060208201905061547a6000830184614f5c565b92915050565b60006060820190506154956000830186614f5c565b6154a26020830185614a73565b6154af6040830184614a73565b949350505050565b6000610100820190506154cd600083018b614f5c565b81810360208301526154df818a614aa0565b90506154ee6040830189614f5c565b6154fb6060830188614f5c565b6155086080830187614f5c565b61551560a0830186614f5c565b61552260c0830185614f5c565b61552f60e0830184614f5c565b9998505050505050505050565b6000615546615557565b905061555282826157d9565b919050565b6000604051905090565b600067ffffffffffffffff82111561557c5761557b6158e0565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156155a8576155a76158e0565b5b6155b18261590f565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b60006155e582615737565b91506155f083615737565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561562557615624615853565b5b828201905092915050565b600061563b82615737565b915061564683615737565b92508261565657615655615882565b5b828204905092915050565b600061566c82615737565b915061567783615737565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156156b0576156af615853565b5b828202905092915050565b60006156c682615737565b91506156d183615737565b9250828210156156e4576156e3615853565b5b828203905092915050565b60006156fa82615717565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061574c82615753565b9050919050565b600061575e82615717565b9050919050565b82818337600083830152505050565b60005b83811015615792578082015181840152602081019050615777565b838111156157a1576000848401525b50505050565b600060028204905060018216806157bf57607f821691505b602082108114156157d3576157d26158b1565b5b50919050565b6157e28261590f565b810181811067ffffffffffffffff82111715615801576158006158e0565b5b80604052505050565b600061581582615737565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561584857615847615853565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f63616c6c65722069732064726976657200000000000000000000000000000000600082015250565b7f63616c6c65722069732061637469766500000000000000000000000000000000600082015250565b7f647269766572206e6f74206d6565742062616467650000000000000000000000600082015250565b7f5f6261646765734d617853636f7265732e6c656e677468206d7573742062652060008201527f31206c657373207468616e204261646765730000000000000000000000000000602082015250565b7f6465706f73697420656d70747900000000000000000000000000000000000000600082015250565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b7f706178206d75737420636f6e6669726d2064657374696e6174696f6e2072656160008201527f63686564206f72206e6f74202d20696e6469636174656420627920647269766560208201527f7200000000000000000000000000000000000000000000000000000000000000604082015250565b7f7472697020616c72656164792073746172746564000000000000000000000000600082015250565b7f7472697020746f6f206c6f6e6700000000000000000000000000000000000000600082015250565b7f6472697665722773206465706f736974203c2066617265000000000000000000600082015250565b7f6e6f7420696e6974205269646542617365000000000000000000000000000000600082015250565b7f636865636b20746f6b656e20616c6c6f77616e63650000000000000000000000600082015250565b7f62616467652072616e6b206e6f74206163686965766564000000000000000000600082015250565b7f3020616464726573730000000000000000000000000000000000000000000000600082015250565b7f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160008201527f647920696e697469616c697a6564000000000000000000000000000000000000602082015250565b7f7478206661696c65640000000000000000000000000000000000000000000000600082015250565b7f647269766572206e6f74206d6174636820746978206472697665720000000000600082015250565b7f636f6e747261637420696e73756666696369656e742066756e64730000000000600082015250565b7f647269766572206d75737420656e642074726970000000000000000000000000600082015250565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f70617373656e6765722773206465706f736974203c2066617265000000000000600082015250565b7f63616c6c6572206e6f7420647269766572000000000000000000000000000000600082015250565b7f3020616d6f756e74000000000000000000000000000000000000000000000000600082015250565b7f647269766572206e6f74206d656574206261646765202d207374726963740000600082015250565b7f706178206e6f74206d6174636820746978207061780000000000000000000000600082015250565b7f5f636f73745065724d657472652e6c656e677468206d7573742062652065717560008201527f616c204261646765730000000000000000000000000000000000000000000000602082015250565b7f746f6f206561726c790000000000000000000000000000000000000000000000600082015250565b7f64726976657220656e6465642074726970000000000000000000000000000000600082015250565b7f74726970206e6f74207374617274656400000000000000000000000000000000600082015250565b7f75726920616c7265616479207365740000000000000000000000000000000000600082015250565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b7f757269206e6f742073657420696e20626720636865636b000000000000000000600082015250565b7f7374696c6c2062616e6e65640000000000000000000000000000000000000000600082015250565b615f56816156ef565b8114615f6157600080fd5b50565b615f6d81615701565b8114615f7857600080fd5b50565b615f848161570d565b8114615f8f57600080fd5b50565b615f9b81615737565b8114615fa657600080fd5b5056fea264697066735822122090db179028353e0324fc1f76fd1e727fda28269f5d690690967da7df182c691e64736f6c63430008020033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "cancelPickUp(bytes32)": {
        "custom:event": "DriverCancelled",
        "params": {
          "_tixId": "Ticket ID"
        }
      },
      "cancelRequest(bytes32)": {
        "custom:event": "RequestCancelled",
        "params": {
          "_tixId": "Ticket ID"
        }
      },
      "destinationNotReached(bytes32)": {
        "custom:event": "DestinationNotReached",
        "params": {
          "_tixId": "Ticket ID"
        }
      },
      "destinationReached(bytes32)": {
        "custom:event": "DestinationReached",
        "params": {
          "_tixId": "Ticket ID"
        }
      },
      "endTrip(bytes32,bool,uint256)": {
        "custom:event": "TripEnded driver would select destination reached or not, and event will emit to passenger's UI then passenger would confirm if this is true or false (via frontend UI), followed by a rating",
        "params": {
          "_confirmation": "confirmation from passenger that either destination has been reached or not",
          "_rating": "refer _giveRating",
          "_tixId": "Ticket ID"
        }
      },
      "forceEndDriver(bytes32)": {
        "custom:event": "ForceEndDriver no fare is paid, but passenger is temporarily banned for banDuration",
        "params": {
          "_tixId": "Ticket ID"
        }
      },
      "forceEndPassenger(bytes32)": {
        "custom:event": "ForceEndPassenger no fare is paid, but driver is temporarily banned for banDuration",
        "params": {
          "_tixId": "Ticket ID"
        }
      },
      "getTicket(bytes32,uint256)": {
        "custom:event": "AcceptedTicket higher badge can charge higher price, but what if passenger always choose lower price? (badgeToCostPerMetre[_badge], at RidePassenger.sol) then higher badge driver wont get chosen at all solution: _useBadge that allows driver to choose which badge rank they want to use up to achieved badge rank at frontend, default _useBadge to driver's current badge rank",
        "params": {
          "_tixId": "Ticket ID",
          "_useBadge": "allows driver to use any badge rank equal to or lower than current rank  (this is to give driver the option of lower cosr per metre rates)"
        }
      },
      "initializeRideBase(address,uint256[],uint256,uint256,uint256[],uint256,uint256)": {
        "custom:event": "InitializedRideBase",
        "details": "to be run instantly after deployment",
        "params": {
          "_badgesMaxScores": "| Refer RideBadge.sol",
          "_banDuration": "| Refer RideCost.sol",
          "_baseFare": "| Refer RideCost.sol",
          "_costPerMetre": "| Refer RideCost.sol",
          "_costPerMinute": "| Refer RideCost.sol",
          "_requestFee": "| Refer RideCost.sol",
          "_tokenAddress": "| Ride token address"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "passBackgroundCheck(address,string)": {
        "custom:event": "ApplicantApproved",
        "params": {
          "_driver": "applicant",
          "_uri": "information of applicant"
        }
      },
      "placeDeposit(uint256)": {
        "custom:event": "TokensDeposited",
        "details": "call token contract's \"approve\" first",
        "params": {
          "_amount": "| unit in token"
        }
      },
      "registerDriver(uint256)": {
        "custom:event": "DriverRegistered",
        "params": {
          "_maxMetresPerTrip": "| unit in metre"
        }
      },
      "removeDeposit()": {
        "custom:event": "TokensRemoved"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "requestTicket(uint256,bool,uint256,uint256)": {
        "custom:event": "RequestTicket",
        "params": {
          "_badge": "badge rank requested",
          "_metres": "estimated distance from origin to destination as determined by Maps API",
          "_minutes": "estimated time taken from origin to destination as determined by Maps API",
          "_strict": "whether driver must meet requested badge rank exactly (true) or default - any badge rank equal or greater than (false)"
        }
      },
      "setBadgesMaxScores(uint256[])": {
        "params": {
          "_badgesMaxScores": "Score that defines a specific badge rank"
        }
      },
      "setBanDuration(uint256)": {
        "params": {
          "_banDuration": "| unit in unix timestamp | https://docs.soliditylang.org/en/v0.8.10/units-and-global-variables.html#time-units"
        }
      },
      "setBaseFare(uint256)": {
        "params": {
          "_baseFare": "| unit in token"
        }
      },
      "setCostPerMetre(uint256[])": {
        "params": {
          "_costPerMetre": "| unit in token"
        }
      },
      "setCostPerMinute(uint256)": {
        "params": {
          "_costPerMinute": "| unit in token"
        }
      },
      "setRequestFee(uint256)": {
        "params": {
          "_requestFee": "| unit in token"
        }
      },
      "startTrip(bytes32,address)": {
        "custom:event": "TripStarted",
        "params": {
          "_driver": "driver's address - get via QR scan?",
          "_tixId": "Ticket ID"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateMaxMetresPerTrip(uint256)": {
        "params": {
          "_maxMetresPerTrip": "| unit in metre"
        }
      }
    },
    "title": "Main contract for driver and passenger interaction",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cancelPickUp(bytes32)": {
        "notice": "cancelPickUp cancels pick up, can only be called before startTrip"
      },
      "cancelRequest(bytes32)": {
        "notice": "cancelRequest cancels ticket, can only be called before startTrip"
      },
      "destinationNotReached(bytes32)": {
        "notice": "destinationNotReached allows driver to indicate to passenger to end trip and destination not reached"
      },
      "destinationReached(bytes32)": {
        "notice": "destinationReached allows driver to indicate to passenger to end trip and destination reached"
      },
      "endTrip(bytes32,bool,uint256)": {
        "notice": "endTrip ends the trip, can only be called once driver has called either destinationReached or destinationNotReached"
      },
      "forceEndDriver(bytes32)": {
        "notice": "forceEndDriver can be called after tixIdToTicket[_tixId].forceEndTimestamp duration and if passenger has not called endTrip"
      },
      "forceEndPassenger(bytes32)": {
        "notice": "forceEndPassenger can be called after tixIdToTicket[_tixId].forceEndTimestamp duration and if driver has not called destinationReached or destinationNotReached"
      },
      "getTicket(bytes32,uint256)": {
        "notice": "getTicket allows driver to accept passenger's ticket request"
      },
      "initializeRideBase(address,uint256[],uint256,uint256,uint256[],uint256,uint256)": {
        "notice": "initializeRideBase initializes parameters of RideHub"
      },
      "passBackgroundCheck(address,string)": {
        "notice": "passBackgroundCheck of driver applicants"
      },
      "placeDeposit(uint256)": {
        "notice": "placeDeposit allows users to deposit token into RideHub contract"
      },
      "registerDriver(uint256)": {
        "notice": "registerDriver registers approved applicants (has passed background check)"
      },
      "removeDeposit()": {
        "notice": "removeDeposit allows users to remove token from RideHub contract"
      },
      "requestTicket(uint256,bool,uint256,uint256)": {
        "notice": "requestTicket allows passenger to request for ride"
      },
      "setBadgesMaxScores(uint256[])": {
        "notice": "setBadgesMaxScores maps score to badge"
      },
      "setBanDuration(uint256)": {
        "notice": "setBanDuration sets user ban duration"
      },
      "setBaseFare(uint256)": {
        "notice": "setBaseFare sets base fare"
      },
      "setCostPerMetre(uint256[])": {
        "notice": "setCostPerMetre sets cost per metre"
      },
      "setCostPerMinute(uint256)": {
        "notice": "setCostPerMinute sets cost per minute"
      },
      "setRequestFee(uint256)": {
        "notice": "setRequestFee sets request fee"
      },
      "startTrip(bytes32,address)": {
        "notice": "startTrip starts the trip, can only be called once driver reached passenger"
      },
      "updateMaxMetresPerTrip(uint256)": {
        "notice": "updateMaxMetresPerTrip updates maximum metre per trip of driver"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 708,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7588,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "badgeToBadgeMaxScore",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 8322,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "requestFee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 8324,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "baseFare",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 8326,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "costPerMinute",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 8328,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "banDuration",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 8332,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "badgeToCostPerMetre",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3433,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "_status",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 6,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "_initialized",
        "offset": 0,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "_initializing",
        "offset": 1,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 7751,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "token",
        "offset": 2,
        "slot": "8",
        "type": "t_contract(ERC20)4008"
      },
      {
        "astId": 7759,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "initialized",
        "offset": 22,
        "slot": "8",
        "type": "t_bool"
      },
      {
        "astId": 7763,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "addressToDeposit",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7767,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "addressToActive",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7771,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "addressToBanEndTimestamp",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7793,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "addressToDriverReputation",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_struct(DriverReputation)7788_storage)"
      },
      {
        "astId": 7815,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "tixIdToTicket",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_bytes32,t_struct(Ticket)7810_storage)"
      },
      {
        "astId": 7825,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "tixToEndDetails",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_bytes32,t_struct(EndDetails)7820_storage)"
      },
      {
        "astId": 8439,
        "contract": "contracts/ride/RideHub.sol:RideHub",
        "label": "_driverIdCounter",
        "offset": 0,
        "slot": "15",
        "type": "t_struct(Counter)5287_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ERC20)4008": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(DriverReputation)7788_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RideBase.DriverReputation)",
        "numberOfBytes": "32",
        "value": "t_struct(DriverReputation)7788_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(EndDetails)7820_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RideBase.EndDetails)",
        "numberOfBytes": "32",
        "value": "t_struct(EndDetails)7820_storage"
      },
      "t_mapping(t_bytes32,t_struct(Ticket)7810_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct RideBase.Ticket)",
        "numberOfBytes": "32",
        "value": "t_struct(Ticket)7810_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Counter)5287_storage": {
        "encoding": "inplace",
        "label": "struct Counters.Counter",
        "members": [
          {
            "astId": 5286,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "_value",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(DriverReputation)7788_storage": {
        "encoding": "inplace",
        "label": "struct RideBase.DriverReputation",
        "members": [
          {
            "astId": 7773,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7775,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "uri",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          },
          {
            "astId": 7777,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "maxMetresPerTrip",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7779,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "metresTravelled",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 7781,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "countStart",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7783,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "countEnd",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7785,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "totalRating",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 7787,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "countRating",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(EndDetails)7820_storage": {
        "encoding": "inplace",
        "label": "struct RideBase.EndDetails",
        "members": [
          {
            "astId": 7817,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "driver",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7819,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "reached",
            "offset": 20,
            "slot": "0",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "32"
      },
      "t_struct(Ticket)7810_storage": {
        "encoding": "inplace",
        "label": "struct RideBase.Ticket",
        "members": [
          {
            "astId": 7795,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "passenger",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 7797,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "driver",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 7799,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "badge",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 7801,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "strict",
            "offset": 0,
            "slot": "3",
            "type": "t_bool"
          },
          {
            "astId": 7803,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "metres",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 7805,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "fare",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 7807,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "tripStart",
            "offset": 0,
            "slot": "6",
            "type": "t_bool"
          },
          {
            "astId": 7809,
            "contract": "contracts/ride/RideHub.sol:RideHub",
            "label": "forceEndTimestamp",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}